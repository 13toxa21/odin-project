class Mastermind

	def initialize
		# Set up secret code generated by computer with 4 random numbers b/w 1 and 6
		@answer = []
		4.times { @answer << rand(6) + 1 }
		# The "board" is the list of user's guesses
		@board = []
		# "Evaluate" is the list of responses to the user's guesses
		@evaluate = []
		# The current turn
		@turn = 0
		# Display intro message
		intro
		# Let user guess
		guess_again
	end

	protected

	def intro
		puts
		puts "Welcome to Mastermind!"
		puts "The computer has made a secret code using the numbers 1-6"
		puts "in four spots like this: \"5136\""
		puts "Your task is to guess the order!"
		puts "You have 12 tries to get it right."
		puts 
		puts "You will be told how many numbers are in the right spot"
		puts "Like this: \"2 right\""
		puts "And how many numbers are in the secret code, but need to be moved"
		puts "Like this: \"1 close\""
		puts
		puts "So if the secret code is 1231 and you enter 2136, the output will be"
		puts "\"1 right, 2 close\" since the 3 is right and the 2 and 1 need to be moved" 
	end

	def guess_again(message = nil)
		# As long as user hasn't run out of turns...
		if @turn < 12
			# If there was no error message and it isn't the first turn, show the board
			if message == nil && @turn > 0 
				show_board
			end
			puts 
			puts "Enter your guess. You've used #{@turn} of 12 turns."
			# Get user's guess
			guess = gets.chomp
			# Put each digit into an array
			arr = []
			guess.split("").each { |num| arr << num.to_i }
			# Make sure guess was correctly inputted
			sanitize_input(arr)
		# User ran out of turns, show answer
		else
			puts 
			puts "Whoops! You ran out of turns"
			puts "The correct answer was #{@answer.join}"
		end
	end

	def show_board
		puts 
		puts "-------------------"
		puts "Board so far: "
		# Go through each guess and answers and display them
		@board.each_with_index do |guess, i| 
			puts "#{guess.join} #{@evaluate[i]}"
		end
		puts "-------------------"
	end

	def sanitize_input(arr)
		# Checking variable checks to make sure each digit is correct
		checking = 0
		# Set error message to nil
		message = nil
		# Check each digit in the array to make sure it's a digit
		# If not, increase checking variable
		arr.each do |n|
			unless (1..6).include?(n)
				checking += 1
			end
		end
		# If all entries were digits and there were 4 of them...
		if checking == 0 && arr.length == 4
			# Add guess to the board, increase the turn and check if guess was correct
			@board << arr
			@turn += 1
			check_guess(arr)
		# Guess was all digits, but there weren't four
		# Send error message to error method
		elsif checking == 0 && arr.length != 4
			message = "Whoops! You must enter exactly FOUR numbers like this: 3241"
			error(message)
		# Guess was not all digits, but there were four
		# Send error message to error method
		elsif checking > 0 && arr.length == 4
			message = "Whoops! You must enter numbers 1-6 like this: 4256"
			error(message)
		# Guess wasn't all digits, and there weren't four
		# Send error message to error method
		else
			message = "Whoops! You must enter FOUR numbers and they have to be 1-6 \nlike this: 1234"
			error(message)
		end
	end

	def error(message)
		# Display error message, guess again, noting that there was an error so don't show board
		puts
		puts message
		guess_again("err")
	end

	def check_guess(arr)
		# If guess equals the answer, show win message
		if arr == @answer
			puts "Congrats, you won!"
			puts "You guessed the code of #{@answer.join} in #{@turn} turns!"
		else
			# Guess wasn't correct, so send through evaluate_guess method to see how close it was
			evaluate_guess
		end
	end

	def evaluate_guess
		# How many were right
		right_guesses = 0
		# How many were close
		almost_guesses = 0
		# Put answer and guess in a temporary array for modifying
		temp_answer = []
		temp_guess = []
		@answer.each { |n| temp_answer << n }
		@board[-1].each { |n| temp_guess << n }
		# Go through each digit in answer to see how many were correct
		temp_answer.each_with_index do |num, i|
			# If corresponding digit in guess is correct...
			if temp_guess[i] == num
				# Increase right variable
				right_guesses += 1
				# And change both numbers in temporary array to invalid numbers so they don't get counted in the next step
				temp_guess[i] = 9
				temp_answer[i] = 8
			end
		end
		# Go through each digit in answer to see how many were close
		# The arrays now have correct digits taken out so they don't get counted again
		temp_answer.each_with_index do |num, i|
			next_num = 0
			# Step through each digit in guess
			4.times do |x|
				# If guess is the same
				if temp_guess[x] == num && next_num == 0
					# Increase almost variable and take out digits
					almost_guesses += 1
					temp_guess[x] = 9
					temp_answer[i] = 8
					# Move on to next number in answer array so it doesn't get counted again
					next_num = 1
				end
			end
		end
		# Add how many were right and close to the evaluate array
		@evaluate << "#{right_guesses} right, #{almost_guesses} close"
		# Let user guess again
		guess_again
	end
end

game = Mastermind.new